namespace Компилятор
{
    /// Определяет типы терминалов (токенов), распознаваемых лексическим анализатором.
   public enum ETerminalType
    {
        /// Целое число
        Number,
        /// Строка текста
        TextLine,
        /// True или False
        Boolean,
        // Арифметические операторы
        /// Оператор сложения (+)
        Plus,
        /// Оператор вычитания (-)
        Minus,
        /// Оператор умножения (*)
        Multiply,
        /// Оператор деления (/)
        Divide,
        /// Оператор остатка от деления (%)
        Modulus,
        // Логические операторы
        /// Логическое И (&&)
        And,
        /// Логическое ИЛИ (||)
        Or,
        /// Логическое НЕ (!)
        Not,
        // Скобки
        /// Открывающая круглая скобка ( ( )
        LeftParen,
        /// Закрывающая круглая скобка ( ) )
        RightParen,
        /// Открывающая квадратная скобка ( [ )
        LeftBracket,
        /// Закрывающая квадратная скобка ( ] )
        RightBracket,
        /// Открывающая фигурная скобка ( { )
        LeftBrace,
        /// Закрывающая фигурная скобка ( } )
        RightBrace,
        // Кавычки
        /// Двойная кавычка ( " )
        DoubleQuote,
        // Присваивание
        /// Оператор присваивания ( = )
        Assignment,
        // Идентификаторы и ключевые слова
        /// Имя переменной
        VariableName,
        /// Ключевое слово if
        If,
        /// Ключевое слово else
        Else,
        /// Оператор равенства ( == )
        Equal,
        /// Оператор "меньше" ( < )
        Less,
        /// Оператор "больше" ( > )
        Greater,
        /// Оператор "меньше или равно" ( <= )
        LessEqual,
        /// Оператор "больше или равно" ( >= )
        GreaterEqual,
        /// Ключевое слово while
        While,
        /// Ключевое слово int (тип данных)
        Int,
        /// Ключевое слово string (тип данных)
        String,
        /// Ключевое слово bool (тип данных)
        Bool,
        /// Ключевое слово output (функция вывода)
        Output,
        /// Ключевое слово input (функция ввода)
        Input,
        /// Точка с запятой ( ; )
        Semicolon,
        // Стандартные функции (пример)
        /// Функция квадратного корня (sqrt)
        Sqrt,
        /// Функция возведения в степень (pow)
        Pow
    }

    /// Определяет типы символов, используемых в обратной польской нотации (RPN).
    // F_ (Function) - операции или функции.
    // A_ (Argument) - операнды или аргументы.
    // T_ (Token) - служебные токены RPN, не являющиеся операциями или аргументами напрямую (например, скобки RPN).
    // М_ (Mark) - метки для переходов.
    public enum ERPNType
    {
        // ОПЕРАЦИИ (F_)
        /// Функция вывода: Output(A)
        F_Output,
        /// Функция ввода: Input(A)
        F_Input,
        /// Присваивание: A = B (в RPN: B A F_Assignment)
        F_Assignment,
        /// Логическое И: A && B
        F_And,
        /// Логическое ИЛИ: A || B
        F_Or,
        /// Равенство: A == B
        F_Equal,
        /// Меньше: A < B
        F_Less,
        /// Больше: A > B
        F_Greater,
        /// Меньше или равно: A <= B
        F_LessEqual,
        /// Больше или равно: A >= B
        F_GreaterEqual,
        /// Сложение/конкатенация: A + B
        F_Plus,
        /// Вычитание/унарный минус: A - B или -A
        F_Minus,
        /// Умножение: A * B
        F_Multiply,
        /// Деление: A / B
        F_Divide,
        /// Остаток от деления: A % B
        F_Modulus,
        /// Логическое НЕ: !A
        F_Not,
        /// Квадратный корень: sqrt(A)
        F_Sqrt,
        /// Возведение в степень: pow(A,B) (A^B)
        F_Pow,
        /// Доступ к элементу массива: A[B] (в RPN: A B F_Index)
        F_Index,
        /// Объявление переменной int: int A
        F_Int,
        /// Объявление переменной string: string A
        F_String,
        /// Объявление переменной bool: bool A
        F_Bool,
        /// Объявление массива int: int[] A (размер B) (в RPN: B A F_IntArray)
        F_IntArray,
        /// Объявление массива string: string[] A (размер B)
        F_StringArray,
        /// Объявление массива bool: bool[] A (размер B)
        F_BoolArray,
        // АРГУМЕНТЫ/ОПЕРАНДЫ (A_)
        /// Числовой литерал
        A_Number,
        /// Строковый литерал
        A_TextLine,
        /// Булевый литерал
        A_Boolean,
        /// Имя переменной
        A_VariableName,
        // СЛУЖЕБНЫЕ ТОКЕНЫ RPN (T_)
        /// Ключевое слово if (для RPN)
        T_If,
        /// Ключевое слово else (для RPN)
        T_Else,
        /// Ключевое слово while (для RPN)
        T_While,
        /// Точка с запятой (служебный символ RPN)
        T_Semicolon,
        /// Открывающая круглая скобка (служебный символ RPN)
        T_LeftParen,
        /// Закрывающая круглая скобка (служебный символ RPN)
        T_RightParen,
        /// Открывающая квадратная скобка (служебный символ RPN)
        T_LeftBracket,
        /// Закрывающая квадратная скобка (служебный символ RPN)
        T_RightBracket,
        /// Открывающая фигурная скобка (служебный символ RPN)
        T_LeftBrace,
        /// Закрывающая фигурная скобка (служебный символ RPN)
        T_RightBrace,
        // УПРАВЛЕНИЕ ПОТОКОМ (F_)
        /// Условный переход: если на вершине стека FALSE, перейти к метке М_Mark
        F_ConditionalJumpToMark,
        /// Безусловный переход к метке М_Mark
        F_UnconditionalJumpToMark,
        // МЕТКИ (М_)
        /// Метка-указатель для переходов
        М_Mark,
    }

    /// Определяет конкретные типы меток, используемых в RPN для организации переходов.
    public enum EMarkType
    {
        /// Метка для обозначения начала цикла while.
        WhileBeginMark,
        /// Метка для обозначения конца тела цикла while (перед проверкой условия для следующей итерации).
        WhileEndMark,
        /// Метка для перехода в случае ложности условия оператора if (переход к блоку else или за пределы if).
        IfMark,
        /// Метка для безусловного перехода в конце блока if (чтобы пропустить блок else).
        ElseMark,
    }
}
